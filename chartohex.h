#ifndef CHARTOHEX_H
#define CHARTOHEX_H

#include "mainwindow.h"

#define BUF_LEN   65536
#define SEND_LEN  (BUF_LEN + 8)

const unsigned int crc_table[256] = {
    0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf,
    0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7,
    0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,
    0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876,
    0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd,
    0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,
    0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c,
    0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974,
    0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb,
    0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,
    0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a,
    0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,
    0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9,
    0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1,
    0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,
    0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70,
    0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7,
    0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff,
    0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036,
    0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e,
    0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,
    0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd,
    0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134,
    0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,
    0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3,
    0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb,
    0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232,
    0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a,
    0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1,
    0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
    0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
    0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
};

class char2hex
{
    private:
        std::string  trans_format_flag;
        unsigned int  sqec_num = 0;

public:
    unsigned int  hex_length = 0;
    unsigned char hex_buf[BUF_LEN];

    unsigned int  send_length = 0;
    unsigned char send_buf[SEND_LEN];
    unsigned short crc = 0x0000;

    char error_flag = 0;

    void trans_data(QByteArray data);
    void add_sqec_num(void);
    void do_crc_table(unsigned char* ptr, int len);
    void cal_crc(QByteArray data);
};

void char2hex::trans_data(QByteArray data)
{
    char recv_data = 0;
    int  char_length = 0;
    int  char_enable = 0;

    unsigned int trans_length = data.length();
    char* trans_data = data.data();

    hex_length = 0;
    error_flag  = 0;

    for(unsigned int i = 0; i < trans_length; i++)
    {
        recv_data = *(trans_data+i);
        char_enable = 1;

        switch (recv_data)
        {
        case '0' ... '9':
            recv_data -= 0x30;
            break;

        case 'A' ... 'F':
            recv_data -= ('A' - 10);
            break;

        case 'a' ... 'f':
            recv_data -= ('a' - 10);
            break;

            // case '/':
            //     char_enable = 0;
            //     break;

        case ' ':
            char_enable = 2;
            break;

        default:
            error_flag = 1;
            char_enable = 0;
            break;
        }

        if(char_enable == 1)
        {
            hex_buf[char_length/2] <<= 4;
            hex_buf[char_length/2] |= recv_data;

            char_length++;
            hex_length = char_length/2;
        }
        else if(char_enable == 0 || hex_length == BUF_LEN)
            break;
    }

    if(char_length%2 == 1)
        error_flag = 2;
}


void char2hex::add_sqec_num(void)
{
    do_crc_table(hex_buf, hex_length);

    send_buf[0] = (unsigned char)((hex_length + 2) >> 8);
    send_buf[1] = (unsigned char)((hex_length + 2));

    for(int i = 0; i < 4; i++)
        send_buf[2+i] = (unsigned char)(char2hex::sqec_num >> (24 - (8*i)));

    //   char2hex::sqec_num++;

    memcpy(send_buf + 6,hex_buf,hex_length);

    send_length = hex_length + 8;

    send_buf[send_length - 2] = (unsigned char)(crc >> 8);
    send_buf[send_length - 1] = (unsigned char)(crc);
}

void char2hex::do_crc_table(unsigned char* ptr, int len)
{

    crc = 0;

    while (len--)
    {
        crc = (crc >> 8) ^ crc_table[(crc ^ *ptr++) & 0xff];
    }
}

void char2hex::cal_crc(QByteArray data)
{
    char2hex::trans_data(data);

    if(char2hex::hex_length > 0 && error_flag == 0)
        char2hex::do_crc_table(hex_buf,hex_length);
}

#endif // CHARTOHEX_H
